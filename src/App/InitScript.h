const char FreeCADInit[] ="# FreeCAD init module\n"
"# (c) 2001 Juergen Riegel\n"
"#\n"
"# Gathering all the information to start FreeCAD\n"
"# This is the second one of three init scripts, the third one\n"
"# runs when the gui is up\n"
"\n"
"#***************************************************************************\n"
"#*   (c) Juergen Riegel (juergen.riegel@web.de) 2002                       *\n"
"#*                                                                         *\n"
"#*   This file is part of the FreeCAD CAx development system.              *\n"
"#*                                                                         *\n"
"#*   This program is free software  you can redistribute it and/or modify  *\n"
"#*   it under the terms of the GNU Lesser General Public License (LGPL)    *\n"
"#*   as published by the Free Software Foundation  either version 2 of     *\n"
"#*   the License, or (at your option) any later version.                   *\n"
"#*   for detail see the LICENCE text file.                                 *\n"
"#*                                                                         *\n"
"#*   FreeCAD is distributed in the hope that it will be useful,            *\n"
"#*   but WITHOUT ANY WARRANTY  without even the implied warranty of        *\n"
"#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
"#*   GNU Lesser General Public License for more details.                   *\n"
"#*                                                                         *\n"
"#*   You should have received a copy of the GNU Library General Public     *\n"
"#*   License along with FreeCAD  if not, write to the Free Software        *\n"
"#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *\n"
"#*   USA                                                                   *\n"
"#*                                                                         *\n"
"#*   Juergen Riegel 2002                                                   *\n"
"#***************************************************************************/\n"
"\n"
"\n"
"# imports the one and only\n"
"import FreeCAD\n"
"\n"
"def removeFromPath(module_name):\n"
"	\"\"\"removes the module from the sys.path. The entry point for imports\n"
"		will therefore always be FreeCAD.\n"
"		eg.: from FreeCAD.Module.submodule import function\"\"\"\n"
"	import sys, os\n"
"	paths = sys.path\n"
"	for path in paths:\n"
"		if module_name in path:\n"
"			sys.path.remove(path)\n"
"			return\n"
"	else:\n"
"		Wrn(module_name + \" not found in sys.path\\n\")\n"
"\n"
"FreeCAD._importFromFreeCAD = removeFromPath\n"
"\n"
"\n"
"def InitApplications():\n"
"	try:\n"
"		import sys,os,traceback,io\n"
"	except ImportError:\n"
"		FreeCAD.Console.PrintError(\"\\n\\nSeems the python standard libs are not installed, bailing out!\\n\\n\")\n"
"		raise\n"
"	# Checking on FreeCAD module path ++++++++++++++++++++++++++++++++++++++++++\n"
"	ModDir = FreeCAD.getHomePath()+\'Mod\'\n"
"	ModDir = os.path.realpath(ModDir)\n"
"	ExtDir = FreeCAD.getHomePath()+\'Ext\'\n"
"	ExtDir = os.path.realpath(ExtDir)\n"
"	BinDir = FreeCAD.getHomePath()+\'bin\'\n"
"	BinDir = os.path.realpath(BinDir)\n"
"	LibDir = FreeCAD.getHomePath()+\'lib\'\n"
"	LibDir = os.path.realpath(LibDir)\n"
"	Lib64Dir = FreeCAD.getHomePath()+\'lib64\'\n"
"	Lib64Dir = os.path.realpath(Lib64Dir)\n"
"	AddPath = FreeCAD.ConfigGet(\"AdditionalModulePaths\").split(\";\")\n"
"	HomeMod = FreeCAD.getUserAppDataDir()+\"Mod\"\n"
"	HomeMod = os.path.realpath(HomeMod)\n"
"	MacroDir = FreeCAD.ParamGet(\"User parameter:BaseApp/Preferences/Macro\").GetString(\"MacroPath\")\n"
"	MacroMod = os.path.realpath(MacroDir+\"/Mod\")\n"
"	SystemWideMacroDir = FreeCAD.getHomePath()+\'Macro\'\n"
"	SystemWideMacroDir = os.path.realpath(SystemWideMacroDir)\n"
"\n"
"	#print FreeCAD.getHomePath()\n"
"	if os.path.isdir(FreeCAD.getHomePath()+\'src\\\\Tools\'):\n"
"		sys.path.append(FreeCAD.getHomePath()+\'src\\\\Tools\')\n"
"\n"
"\n"
"\n"
"	# Searching for module dirs +++++++++++++++++++++++++++++++++++++++++++++++++++\n"
"	# Use dict to handle duplicated module names\n"
"	ModDict = {}\n"
"	if os.path.isdir(ModDir):\n"
"		ModDirs = os.listdir(ModDir)\n"
"		for i in ModDirs: ModDict[i.lower()] = os.path.join(ModDir,i)\n"
"	else:\n"
"		Wrn (\"No modules found in \" + ModDir + \"\\n\")\n"
"	# Search for additional modules in the home directory\n"
"	if os.path.isdir(HomeMod):\n"
"		HomeMods = os.listdir(HomeMod)\n"
"		for i in HomeMods: ModDict[i.lower()] = os.path.join(HomeMod,i)\n"
"	# Search for additional modules in the macro directory\n"
"	if os.path.isdir(MacroMod):\n"
"		MacroMods = os.listdir(MacroMod)\n"
"		for i in MacroMods:\n"
"			key = i.lower()\n"
"			if key not in ModDict: ModDict[key] = os.path.join(MacroMod,i)\n"
"	# Search for additional modules in command line\n"
"	for i in AddPath:\n"
"		if os.path.isdir(i): ModDict[i] = i\n"
"	#AddModPaths = App.ParamGet(\"System parameter:AdditionalModulePaths\")\n"
"	#Err( AddModPaths)\n"
"	# add also this path so that all modules search for libraries\n"
"	# they depend on first here\n"
"	PathExtension = []\n"
"	PathExtension.append(BinDir)\n"
"\n"
"	# prepend all module paths to Python search path\n"
"	Log(\'Init:   Searching for modules...\\n\')\n"
"\n"
"\n"
"	# to have all the module-paths available in FreeCADGuiInit.py:\n"
"	FreeCAD.__ModDirs__ = list(ModDict.values())\n"
"\n"
"	# this allows importing with:\n"
"	# from FreeCAD.Module import package\n"
"	FreeCAD.__path__ = [ModDir, Lib64Dir, LibDir, HomeMod]\n"
"\n"
"	# also add these directories to the sys.path to\n"
"	# not change the old behaviour. once we have moved to\n"
"	# proper python modules this can eventuelly be removed.\n"
"	sys.path = [ModDir, Lib64Dir, LibDir, ExtDir] + sys.path\n"
"\n"
"	for Dir in ModDict.values():\n"
"		if ((Dir != \'\') & (Dir != \'CVS\') & (Dir != \'__init__.py\')):\n"
"			sys.path.insert(0,Dir)\n"
"			PathExtension.append(Dir)\n"
"			InstallFile = os.path.join(Dir,\"Init.py\")\n"
"			if (os.path.exists(InstallFile)):\n"
"				try:\n"
"					# XXX: This looks scary securitywise...\n"
"\n"
"					with open(InstallFile) as f:\n"
"						exec(f.read())\n"
"				except Exception as inst:\n"
"					Log(\'Init:      Initializing \' + Dir + \'... failed\\n\')\n"
"					Log(\'-\'*100+\'\\n\')\n"
"					Log(traceback.format_exc())\n"
"					Log(\'-\'*100+\'\\n\')\n"
"					Err(\'During initialization the error \' + str(inst) + \' occurred in \' + InstallFile + \'\\n\')\n"
"					Err(\'Please look into the log file for further information\\n\')\n"
"				else:\n"
"					Log(\'Init:      Initializing \' + Dir + \'... done\\n\')\n"
"			else:\n"
"				Log(\'Init:      Initializing \' + Dir + \'(Init.py not found)... ignore\\n\')\n"
"\n"
"	extension_modules = []\n"
"\n"
"	try:\n"
"		import pkgutil\n"
"		import importlib\n"
"		import freecad\n"
"		for _, freecad_module_name, freecad_module_ispkg in pkgutil.iter_modules(freecad.__path__, \"freecad.\"):\n"
"			if freecad_module_ispkg:\n"
"				Log(\'Init: Initializing \' + freecad_module_name + \'\\n\')\n"
"				freecad_module = importlib.import_module(freecad_module_name)\n"
"				extension_modules += [freecad_module_name]\n"
"				if any (module_name == \'init\' for _, module_name, ispkg in pkgutil.iter_modules(freecad_module.__path__)):\n"
"					try:\n"
"						importlib.import_module(freecad_module_name + \'.init\')\n"
"						Log(\'Init: Initializing \' + freecad_module_name + \'... done\\n\')\n"
"					except Exception as inst:\n"
"						Err(\'During initialization the error \' + str(inst) + \' occurred in \' + freecad_module_name + \'\\n\')\n"
"						Err(\'-\'*80+\'\\n\')\n"
"						Err(traceback.format_exc())\n"
"						Err(\'-\'*80+\'\\n\')\n"
"						Log(\'Init:      Initializing \' + freecad_module_name + \'... failed\\n\')\n"
"						Log(\'-\'*80+\'\\n\')\n"
"						Log(traceback.format_exc())\n"
"						Log(\'-\'*80+\'\\n\')\n"
"				else:\n"
"					Log(\'Init: No init module found in \' + freecad_module_name + \', skipping\\n\')\n"
"	except ImportError as inst:\n"
"		Err(\'During initialization the error \' + str(inst) + \' occurred\\n\')\n"
"\n"
"	Log(\"Using \"+ModDir+\" as module path!\\n\")\n"
"	# In certain cases the PathExtension list can contain invalid strings. We concatenate them to a single string\n"
"	# but check that the output is a valid string\n"
"	PathEnvironment = PathExtension.pop(0) + os.pathsep\n"
"	for path in PathExtension:\n"
"		try:\n"
"			PathEnvironment += path + os.pathsep\n"
"		except UnicodeDecodeError:\n"
"			Wrn(\'Filter invalid module path: u{}\\n\'.format(repr(path)))\n"
"			pass\n"
"\n"
"	# new paths must be prepended to avoid to load a wrong version of a library\n"
"	try:\n"
"		os.environ[\"PATH\"] = PathEnvironment + os.environ[\"PATH\"]\n"
"	except UnicodeDecodeError:\n"
"		# See #0002238. FIXME: check again once ported to Python 3.x\n"
"		Log(\'UnicodeDecodeError was raised when concatenating unicode string with PATH. Try to remove non-ascii paths...\\n\')\n"
"		path = os.environ[\"PATH\"].split(os.pathsep)\n"
"		cleanpath=[]\n"
"		for i in path:\n"
"			if test_ascii(i):\n"
"				cleanpath.append(i)\n"
"		os.environ[\"PATH\"] = PathEnvironment + os.pathsep.join(cleanpath)\n"
"		Log(\'done\\n\')\n"
"	except UnicodeEncodeError:\n"
"		Log(\'UnicodeEncodeError was raised when concatenating unicode string with PATH. Try to replace non-ascii chars...\\n\')\n"
"		os.environ[\"PATH\"] = PathEnvironment.encode(errors=\'replace\') + os.environ[\"PATH\"]\n"
"		Log(\'done\\n\')\n"
"	except KeyError:\n"
"		os.environ[\"PATH\"] = PathEnvironment\n"
"	path = os.environ[\"PATH\"].split(os.pathsep)\n"
"	Log(\"System path after init:\\n\")\n"
"	for i in path:\n"
"		Log(\"   \" + i + \"\\n\")\n"
"	# add MacroDir to path (RFE #0000504)\n"
"	sys.path.append(MacroDir)\n"
"	# add SystemWideMacroDir to path\n"
"	sys.path.append(SystemWideMacroDir)\n"
"	# add special path for MacOSX (bug #0000307)\n"
"	import platform\n"
"	if len(platform.mac_ver()[0]) > 0:\n"
"		sys.path.append(os.path.expanduser(\'~/Library/Application Support/FreeCAD/Mod\'))\n"
"\n"
"# some often used shortcuts (for lazy people like me  ;-)\n"
"App = FreeCAD\n"
"Log = FreeCAD.Console.PrintLog\n"
"Msg = FreeCAD.Console.PrintMessage\n"
"Err = FreeCAD.Console.PrintError\n"
"Wrn = FreeCAD.Console.PrintWarning\n"
"test_ascii = lambda s: all(ord(c) < 128 for c in s)\n"
"\n"
"#store the cmake variales\n"
"App.__cmake__ = cmake;\n"
"\n"
"#store unit test names\n"
"App.__unit_test__ = []\n"
"\n"
"Log (\'Init: starting App::FreeCADInit.py\\n\')\n"
"\n"
"# init every application by importing Init.py\n"
"try:\n"
"	import traceback\n"
"	InitApplications()\n"
"except Exception as e:\n"
"	Err(\'Error in InitApplications \' + str(e) + \'\\n\')\n"
"	Err(\'-\'*80+\'\\n\')\n"
"	Err(traceback.format_exc())\n"
"	Err(\'-\'*80+\'\\n\')\n"
"\n"
"FreeCAD.addImportType(\"FreeCAD document (*.FCStd)\",\"FreeCAD\")\n"
"\n"
"# set to no gui, is overwritten by InitGui\n"
"App.GuiUp = 0\n"
"\n"
"# fill up unit definitions\n"
"\n"
"App.Units.NanoMetre     = App.Units.Quantity(\'nm\')\n"
"App.Units.MicroMetre    = App.Units.Quantity(\'um\')\n"
"App.Units.MilliMetre    = App.Units.Quantity(\'mm\')\n"
"App.Units.CentiMetre    = App.Units.Quantity(\'cm\')\n"
"App.Units.DeciMetre     = App.Units.Quantity(\'dm\')\n"
"App.Units.Metre         = App.Units.Quantity(\'m\')\n"
"App.Units.KiloMetre     = App.Units.Quantity(\'km\')\n"
"\n"
"App.Units.Liter         = App.Units.Quantity(\'l\')\n"
"\n"
"App.Units.MicroGram     = App.Units.Quantity(\'ug\')\n"
"App.Units.MilliGram     = App.Units.Quantity(\'mg\')\n"
"App.Units.Gram          = App.Units.Quantity(\'g\')\n"
"App.Units.KiloGram      = App.Units.Quantity(\'kg\')\n"
"App.Units.Ton           = App.Units.Quantity(\'t\')\n"
"\n"
"App.Units.Second        = App.Units.Quantity(\'s\')\n"
"App.Units.Minute        = App.Units.Quantity(\'min\')\n"
"App.Units.Hour          = App.Units.Quantity(\'h\')\n"
"\n"
"App.Units.Ampere        = App.Units.Quantity(\'A\')\n"
"App.Units.MilliAmpere   = App.Units.Quantity(\'mA\')\n"
"App.Units.KiloAmpere    = App.Units.Quantity(\'kA\')\n"
"App.Units.MegaAmpere    = App.Units.Quantity(\'MA\')\n"
"\n"
"App.Units.Kelvin        = App.Units.Quantity(\'K\')\n"
"App.Units.MilliKelvin   = App.Units.Quantity(\'mK\')\n"
"App.Units.MicroKelvin   = App.Units.Quantity(\'uK\')\n"
"\n"
"App.Units.Mole          = App.Units.Quantity(\'mol\')\n"
"\n"
"App.Units.Candela       = App.Units.Quantity(\'cd\')\n"
"\n"
"App.Units.Inch          = App.Units.Quantity(\'in\')\n"
"App.Units.Foot          = App.Units.Quantity(\'ft\')\n"
"App.Units.Thou          = App.Units.Quantity(\'thou\')\n"
"App.Units.Yard          = App.Units.Quantity(\'yd\')\n"
"App.Units.Mile          = App.Units.Quantity(\'mi\')\n"
"\n"
"App.Units.Pound         = App.Units.Quantity(\'lb\')\n"
"App.Units.Ounce         = App.Units.Quantity(\'oz\')\n"
"App.Units.Stone         = App.Units.Quantity(\'st\')\n"
"App.Units.Hundredweights= App.Units.Quantity(\'cwt\')\n"
"\n"
"App.Units.Newton        = App.Units.Quantity(\'N\')\n"
"App.Units.KiloNewton    = App.Units.Quantity(\'kN\')\n"
"App.Units.MegaNewton    = App.Units.Quantity(\'MN\')\n"
"App.Units.MilliNewton   = App.Units.Quantity(\'mN\')\n"
"\n"
"App.Units.Pascal        = App.Units.Quantity(\'Pa\')\n"
"App.Units.KiloPascal    = App.Units.Quantity(\'kPa\')\n"
"App.Units.MegaPascal    = App.Units.Quantity(\'MPa\')\n"
"App.Units.GigaPascal    = App.Units.Quantity(\'GPa\')\n"
"\n"
"App.Units.PSI           = App.Units.Quantity(\'psi\')\n"
"\n"
"App.Units.Watt          = App.Units.Quantity(\'W\')\n"
"App.Units.VoltAmpere    = App.Units.Quantity(\'VA\')\n"
"\n"
"App.Units.Volt          = App.Units.Quantity(\'V\')\n"
"\n"
"App.Units.Joule         = App.Units.Quantity(\'J\')\n"
"App.Units.NewtonMeter   = App.Units.Quantity(\'Nm\')\n"
"App.Units.VoltAmpereSecond   = App.Units.Quantity(\'VAs\')\n"
"App.Units.WattSecond    = App.Units.Quantity(\'Ws\')\n"
"\n"
"App.Units.MPH           = App.Units.Quantity(\'mi/h\')\n"
"App.Units.KMH           = App.Units.Quantity(\'km/h\')\n"
"\n"
"\n"
"App.Units.Degree        = App.Units.Quantity(\'deg\')\n"
"App.Units.Radian        = App.Units.Quantity(\'rad\')\n"
"App.Units.Gon           = App.Units.Quantity(\'gon\')\n"
"\n"
"App.Units.Length        = App.Units.Unit(1)\n"
"App.Units.Area          = App.Units.Unit(2)\n"
"App.Units.Volume        = App.Units.Unit(3)\n"
"App.Units.Mass          = App.Units.Unit(0,1)\n"
"App.Units.Angle         = App.Units.Unit(0,0,0,0,0,0,0,1)\n"
"\n"
"App.Units.TimeSpan      = App.Units.Unit(0,0,1)\n"
"App.Units.Velocity      = App.Units.Unit(1,0,-1)\n"
"App.Units.Acceleration  = App.Units.Unit(1,0,-2)\n"
"App.Units.Temperature   = App.Units.Unit(0,0,0,0,1)\n"
"\n"
"App.Units.ElectricCurrent   = App.Units.Unit(0,0,0,1)\n"
"App.Units.ElectricPotential = App.Units.Unit(2,1,-3,-1)\n"
"App.Units.AmountOfSubstance = App.Units.Unit(0,0,0,0,0,1)\n"
"App.Units.LuminousIntensity = App.Units.Unit(0,0,0,0,0,0,1)\n"
"\n"
"App.Units.Stress        = App.Units.Unit(-1,1,-2)\n"
"App.Units.Pressure      = App.Units.Unit(-1,1,-2)\n"
"\n"
"App.Units.Force         = App.Units.Unit(1,1,-2)\n"
"App.Units.Work          = App.Units.Unit(2,1,-2)\n"
"App.Units.Power         = App.Units.Unit(2,1,-3)\n"
"\n"
"\n"
"# clean up namespace\n"
"del(InitApplications)\n"
"del(test_ascii)\n"
"\n"
"Log (\'Init: App::FreeCADInit.py done\\n\')\n"
;


